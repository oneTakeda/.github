# This is a starter workflow to help you get started with building Docker Containers using Actions

# Assumes your GitHub Repository already has JFrog OIDC identity mapping setup correctly
# See https://mytakeda.sharepoint.com/sites/DevOps/SitePages/JFrog-Artifactory-Guide.aspx

name: Docker Build and Push

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the default branch
  push:
    branches: [ $default-branch ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build-and-push"
  build-and-push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Token permissions required for JFrog OIDC authentication to work
    permissions:
      id-token: write
      contents: read
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Setup JFrog CLI and authenticate to JFrog using OIDC
      - name: Setup JFrog CLI
        id: jfrog-auth
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JFROG_URL }} # Same for everyone and available to every repository
        with:
          oidc-provider-name: ${{ secrets.JFROG_OIDC_PROVIDER_NAME }} # Same for everyone and available to every repository
          oidc-audience: ${{ secrets.JFROG_OIDC_AUDIENCE }} # Same for everyone and available to every repository

      # Log in to the Docker Registry
      # Be sure to update with your project's actual registry replacing "EXAMPLE"
      - name: Login to JFrog Artifactory
        uses: docker/login-action@v3
        with:
          registry: takedaawsuseast-EXAMPLE-docker-local.jfrog.io
          username: ${{ steps.jfrog-auth.outputs.oidc-user }}
          password: ${{ steps.jfrog-auth.outputs.oidc-token }}
      
      # Build the image
      # Be sure to update with your project's actual naming replacing "EXAMPLE" and update the context and file path
      # We recommend to update the tags with image name and version usage appropriately, SHA is just an example
      - name: Build and push Docker Image
        uses: docker/build-push-action@v6
        with:
         context: .
         push: false
         file: ./path/to/Dockerfile
         tags: takedaawsuseast-EXAMPLE-docker-local.jfrog.io/EXAMPLE:${{ github.sha }}

      # Push the image using JFrog CLI wrapper to capture build info for JFrog Artifactory
      # Be sure to update with your project's actual naming replacing "EXAMPLE" and update the context and file path
      # We recommend to update the tags with image name and version usage appropriately, SHA is just an example
      - name: Push Docker Image
        if: ${{ github.event_name != 'pull_request' }}
        run: jf docker push takedaawsuseast-EXAMPLE-docker-local.jfrog.io/EXAMPLE:${{ github.sha }}

      # Publish Build Info into JFrog Artifactory
      - name: Publish Build info With JFrog CLI
        run: |
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish